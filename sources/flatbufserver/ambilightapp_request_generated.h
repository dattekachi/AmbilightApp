// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AMBILIGHTAPPREQUEST_AMBILIGHTAPPNET_H_
#define FLATBUFFERS_GENERATED_AMBILIGHTAPPREQUEST_AMBILIGHTAPPNET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace ambilightappnet {

struct Register;
struct RegisterBuilder;
struct RegisterT;

struct RawImage;
struct RawImageBuilder;
struct RawImageT;

struct Image;
struct ImageBuilder;
struct ImageT;

struct Clear;
struct ClearBuilder;
struct ClearT;

struct Color;
struct ColorBuilder;
struct ColorT;

struct Request;
struct RequestBuilder;
struct RequestT;

enum ImageType : uint8_t {
  ImageType_NONE = 0,
  ImageType_RawImage = 1,
  ImageType_MIN = ImageType_NONE,
  ImageType_MAX = ImageType_RawImage
};

inline const ImageType (&EnumValuesImageType())[2] {
  static const ImageType values[] = {
    ImageType_NONE,
    ImageType_RawImage
  };
  return values;
}

inline const char * const *EnumNamesImageType() {
  static const char * const names[3] = {
    "NONE",
    "RawImage",
    nullptr
  };
  return names;
}

inline const char *EnumNameImageType(ImageType e) {
  if (::flatbuffers::IsOutRange(e, ImageType_NONE, ImageType_RawImage)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesImageType()[index];
}

template<typename T> struct ImageTypeTraits {
  static const ImageType enum_value = ImageType_NONE;
};

template<> struct ImageTypeTraits<ambilightappnet::RawImage> {
  static const ImageType enum_value = ImageType_RawImage;
};

template<typename T> struct ImageTypeUnionTraits {
  static const ImageType enum_value = ImageType_NONE;
};

template<> struct ImageTypeUnionTraits<ambilightappnet::RawImageT> {
  static const ImageType enum_value = ImageType_RawImage;
};

struct ImageTypeUnion {
  ImageType type;
  void *value;

  ImageTypeUnion() : type(ImageType_NONE), value(nullptr) {}
  ImageTypeUnion(ImageTypeUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(ImageType_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  ImageTypeUnion(const ImageTypeUnion &);
  ImageTypeUnion &operator=(const ImageTypeUnion &u)
    { ImageTypeUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  ImageTypeUnion &operator=(ImageTypeUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~ImageTypeUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = ImageTypeUnionTraits<RT>::enum_value;
    if (type != ImageType_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, ImageType type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  ambilightappnet::RawImageT *AsRawImage() {
    return type == ImageType_RawImage ?
      reinterpret_cast<ambilightappnet::RawImageT *>(value) : nullptr;
  }
  const ambilightappnet::RawImageT *AsRawImage() const {
    return type == ImageType_RawImage ?
      reinterpret_cast<const ambilightappnet::RawImageT *>(value) : nullptr;
  }
};

bool VerifyImageType(::flatbuffers::Verifier &verifier, const void *obj, ImageType type);
bool VerifyImageTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum Command : uint8_t {
  Command_NONE = 0,
  Command_Color = 1,
  Command_Image = 2,
  Command_Clear = 3,
  Command_Register = 4,
  Command_MIN = Command_NONE,
  Command_MAX = Command_Register
};

inline const Command (&EnumValuesCommand())[5] {
  static const Command values[] = {
    Command_NONE,
    Command_Color,
    Command_Image,
    Command_Clear,
    Command_Register
  };
  return values;
}

inline const char * const *EnumNamesCommand() {
  static const char * const names[6] = {
    "NONE",
    "Color",
    "Image",
    "Clear",
    "Register",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommand(Command e) {
  if (::flatbuffers::IsOutRange(e, Command_NONE, Command_Register)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCommand()[index];
}

template<typename T> struct CommandTraits {
  static const Command enum_value = Command_NONE;
};

template<> struct CommandTraits<ambilightappnet::Color> {
  static const Command enum_value = Command_Color;
};

template<> struct CommandTraits<ambilightappnet::Image> {
  static const Command enum_value = Command_Image;
};

template<> struct CommandTraits<ambilightappnet::Clear> {
  static const Command enum_value = Command_Clear;
};

template<> struct CommandTraits<ambilightappnet::Register> {
  static const Command enum_value = Command_Register;
};

template<typename T> struct CommandUnionTraits {
  static const Command enum_value = Command_NONE;
};

template<> struct CommandUnionTraits<ambilightappnet::ColorT> {
  static const Command enum_value = Command_Color;
};

template<> struct CommandUnionTraits<ambilightappnet::ImageT> {
  static const Command enum_value = Command_Image;
};

template<> struct CommandUnionTraits<ambilightappnet::ClearT> {
  static const Command enum_value = Command_Clear;
};

template<> struct CommandUnionTraits<ambilightappnet::RegisterT> {
  static const Command enum_value = Command_Register;
};

struct CommandUnion {
  Command type;
  void *value;

  CommandUnion() : type(Command_NONE), value(nullptr) {}
  CommandUnion(CommandUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(Command_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  CommandUnion(const CommandUnion &);
  CommandUnion &operator=(const CommandUnion &u)
    { CommandUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  CommandUnion &operator=(CommandUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~CommandUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = CommandUnionTraits<RT>::enum_value;
    if (type != Command_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, Command type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  ambilightappnet::ColorT *AsColor() {
    return type == Command_Color ?
      reinterpret_cast<ambilightappnet::ColorT *>(value) : nullptr;
  }
  const ambilightappnet::ColorT *AsColor() const {
    return type == Command_Color ?
      reinterpret_cast<const ambilightappnet::ColorT *>(value) : nullptr;
  }
  ambilightappnet::ImageT *AsImage() {
    return type == Command_Image ?
      reinterpret_cast<ambilightappnet::ImageT *>(value) : nullptr;
  }
  const ambilightappnet::ImageT *AsImage() const {
    return type == Command_Image ?
      reinterpret_cast<const ambilightappnet::ImageT *>(value) : nullptr;
  }
  ambilightappnet::ClearT *AsClear() {
    return type == Command_Clear ?
      reinterpret_cast<ambilightappnet::ClearT *>(value) : nullptr;
  }
  const ambilightappnet::ClearT *AsClear() const {
    return type == Command_Clear ?
      reinterpret_cast<const ambilightappnet::ClearT *>(value) : nullptr;
  }
  ambilightappnet::RegisterT *AsRegister() {
    return type == Command_Register ?
      reinterpret_cast<ambilightappnet::RegisterT *>(value) : nullptr;
  }
  const ambilightappnet::RegisterT *AsRegister() const {
    return type == Command_Register ?
      reinterpret_cast<const ambilightappnet::RegisterT *>(value) : nullptr;
  }
};

bool VerifyCommand(::flatbuffers::Verifier &verifier, const void *obj, Command type);
bool VerifyCommandVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct RegisterT : public ::flatbuffers::NativeTable {
  typedef Register TableType;
  std::string origin{};
  int32_t priority = 0;
};

struct Register FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RegisterT NativeTableType;
  typedef RegisterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGIN = 4,
    VT_PRIORITY = 6
  };
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  ::flatbuffers::String *mutable_origin() {
    return GetPointer<::flatbuffers::String *>(VT_ORIGIN);
  }
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  bool mutate_priority(int32_t _priority = 0) {
    return SetField<int32_t>(VT_PRIORITY, _priority, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY, 4) &&
           verifier.EndTable();
  }
  RegisterT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RegisterT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Register> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RegisterT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RegisterBuilder {
  typedef Register Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Register::VT_ORIGIN, origin);
  }
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(Register::VT_PRIORITY, priority, 0);
  }
  explicit RegisterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Register> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Register>(end);
    fbb_.Required(o, Register::VT_ORIGIN);
    return o;
  }
};

inline ::flatbuffers::Offset<Register> CreateRegister(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    int32_t priority = 0) {
  RegisterBuilder builder_(_fbb);
  builder_.add_priority(priority);
  builder_.add_origin(origin);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Register> CreateRegisterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *origin = nullptr,
    int32_t priority = 0) {
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return ambilightappnet::CreateRegister(
      _fbb,
      origin__,
      priority);
}

::flatbuffers::Offset<Register> CreateRegister(::flatbuffers::FlatBufferBuilder &_fbb, const RegisterT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RawImageT : public ::flatbuffers::NativeTable {
  typedef RawImage TableType;
  std::vector<uint8_t> data{};
  int32_t width = -1;
  int32_t height = -1;
};

struct RawImage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RawImageT NativeTableType;
  typedef RawImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_WIDTH = 6,
    VT_HEIGHT = 8
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, -1);
  }
  bool mutate_width(int32_t _width = -1) {
    return SetField<int32_t>(VT_WIDTH, _width, -1);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, -1);
  }
  bool mutate_height(int32_t _height = -1) {
    return SetField<int32_t>(VT_HEIGHT, _height, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
  RawImageT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RawImageT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RawImage> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RawImageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RawImageBuilder {
  typedef RawImage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(RawImage::VT_DATA, data);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(RawImage::VT_WIDTH, width, -1);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(RawImage::VT_HEIGHT, height, -1);
  }
  explicit RawImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RawImage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RawImage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RawImage> CreateRawImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    int32_t width = -1,
    int32_t height = -1) {
  RawImageBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RawImage> CreateRawImageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    int32_t width = -1,
    int32_t height = -1) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return ambilightappnet::CreateRawImage(
      _fbb,
      data__,
      width,
      height);
}

::flatbuffers::Offset<RawImage> CreateRawImage(::flatbuffers::FlatBufferBuilder &_fbb, const RawImageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ImageT : public ::flatbuffers::NativeTable {
  typedef Image TableType;
  ambilightappnet::ImageTypeUnion data{};
  int32_t duration = -1;
};

struct Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImageT NativeTableType;
  typedef ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_TYPE = 4,
    VT_DATA = 6,
    VT_DURATION = 8
  };
  ambilightappnet::ImageType data_type() const {
    return static_cast<ambilightappnet::ImageType>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const ambilightappnet::RawImage *data_as_RawImage() const {
    return data_type() == ambilightappnet::ImageType_RawImage ? static_cast<const ambilightappnet::RawImage *>(data()) : nullptr;
  }
  void *mutable_data() {
    return GetPointer<void *>(VT_DATA);
  }
  int32_t duration() const {
    return GetField<int32_t>(VT_DURATION, -1);
  }
  bool mutate_duration(int32_t _duration = -1) {
    return SetField<int32_t>(VT_DURATION, _duration, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           VerifyImageType(verifier, data(), data_type()) &&
           VerifyField<int32_t>(verifier, VT_DURATION, 4) &&
           verifier.EndTable();
  }
  ImageT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ImageT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Image> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const ambilightappnet::RawImage *Image::data_as<ambilightappnet::RawImage>() const {
  return data_as_RawImage();
}

struct ImageBuilder {
  typedef Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data_type(ambilightappnet::ImageType data_type) {
    fbb_.AddElement<uint8_t>(Image::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  void add_duration(int32_t duration) {
    fbb_.AddElement<int32_t>(Image::VT_DURATION, duration, -1);
  }
  explicit ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Image>(end);
    fbb_.Required(o, Image::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<Image> CreateImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ambilightappnet::ImageType data_type = ambilightappnet::ImageType_NONE,
    ::flatbuffers::Offset<void> data = 0,
    int32_t duration = -1) {
  ImageBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

::flatbuffers::Offset<Image> CreateImage(::flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ClearT : public ::flatbuffers::NativeTable {
  typedef Clear TableType;
  int32_t priority = 0;
};

struct Clear FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClearT NativeTableType;
  typedef ClearBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRIORITY = 4
  };
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  bool mutate_priority(int32_t _priority = 0) {
    return SetField<int32_t>(VT_PRIORITY, _priority, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY, 4) &&
           verifier.EndTable();
  }
  ClearT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ClearT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Clear> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ClearT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ClearBuilder {
  typedef Clear Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(Clear::VT_PRIORITY, priority, 0);
  }
  explicit ClearBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Clear> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Clear>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Clear> CreateClear(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t priority = 0) {
  ClearBuilder builder_(_fbb);
  builder_.add_priority(priority);
  return builder_.Finish();
}

::flatbuffers::Offset<Clear> CreateClear(::flatbuffers::FlatBufferBuilder &_fbb, const ClearT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ColorT : public ::flatbuffers::NativeTable {
  typedef Color TableType;
  int32_t data = -1;
  int32_t duration = -1;
};

struct Color FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ColorT NativeTableType;
  typedef ColorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_DURATION = 6
  };
  int32_t data() const {
    return GetField<int32_t>(VT_DATA, -1);
  }
  bool mutate_data(int32_t _data = -1) {
    return SetField<int32_t>(VT_DATA, _data, -1);
  }
  int32_t duration() const {
    return GetField<int32_t>(VT_DURATION, -1);
  }
  bool mutate_duration(int32_t _duration = -1) {
    return SetField<int32_t>(VT_DURATION, _duration, -1);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA, 4) &&
           VerifyField<int32_t>(verifier, VT_DURATION, 4) &&
           verifier.EndTable();
  }
  ColorT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ColorT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Color> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ColorT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ColorBuilder {
  typedef Color Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(int32_t data) {
    fbb_.AddElement<int32_t>(Color::VT_DATA, data, -1);
  }
  void add_duration(int32_t duration) {
    fbb_.AddElement<int32_t>(Color::VT_DURATION, duration, -1);
  }
  explicit ColorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Color> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Color>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Color> CreateColor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data = -1,
    int32_t duration = -1) {
  ColorBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_data(data);
  return builder_.Finish();
}

::flatbuffers::Offset<Color> CreateColor(::flatbuffers::FlatBufferBuilder &_fbb, const ColorT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RequestT : public ::flatbuffers::NativeTable {
  typedef Request TableType;
  ambilightappnet::CommandUnion command{};
};

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestT NativeTableType;
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMAND_TYPE = 4,
    VT_COMMAND = 6
  };
  ambilightappnet::Command command_type() const {
    return static_cast<ambilightappnet::Command>(GetField<uint8_t>(VT_COMMAND_TYPE, 0));
  }
  const void *command() const {
    return GetPointer<const void *>(VT_COMMAND);
  }
  template<typename T> const T *command_as() const;
  const ambilightappnet::Color *command_as_Color() const {
    return command_type() == ambilightappnet::Command_Color ? static_cast<const ambilightappnet::Color *>(command()) : nullptr;
  }
  const ambilightappnet::Image *command_as_Image() const {
    return command_type() == ambilightappnet::Command_Image ? static_cast<const ambilightappnet::Image *>(command()) : nullptr;
  }
  const ambilightappnet::Clear *command_as_Clear() const {
    return command_type() == ambilightappnet::Command_Clear ? static_cast<const ambilightappnet::Clear *>(command()) : nullptr;
  }
  const ambilightappnet::Register *command_as_Register() const {
    return command_type() == ambilightappnet::Command_Register ? static_cast<const ambilightappnet::Register *>(command()) : nullptr;
  }
  void *mutable_command() {
    return GetPointer<void *>(VT_COMMAND);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_COMMAND_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_COMMAND) &&
           VerifyCommand(verifier, command(), command_type()) &&
           verifier.EndTable();
  }
  RequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Request> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const ambilightappnet::Color *Request::command_as<ambilightappnet::Color>() const {
  return command_as_Color();
}

template<> inline const ambilightappnet::Image *Request::command_as<ambilightappnet::Image>() const {
  return command_as_Image();
}

template<> inline const ambilightappnet::Clear *Request::command_as<ambilightappnet::Clear>() const {
  return command_as_Clear();
}

template<> inline const ambilightappnet::Register *Request::command_as<ambilightappnet::Register>() const {
  return command_as_Register();
}

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_command_type(ambilightappnet::Command command_type) {
    fbb_.AddElement<uint8_t>(Request::VT_COMMAND_TYPE, static_cast<uint8_t>(command_type), 0);
  }
  void add_command(::flatbuffers::Offset<void> command) {
    fbb_.AddOffset(Request::VT_COMMAND, command);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    fbb_.Required(o, Request::VT_COMMAND);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ambilightappnet::Command command_type = ambilightappnet::Command_NONE,
    ::flatbuffers::Offset<void> command = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_command(command);
  builder_.add_command_type(command_type);
  return builder_.Finish();
}

::flatbuffers::Offset<Request> CreateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RegisterT *Register::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RegisterT>(new RegisterT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Register::UnPackTo(RegisterT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = origin(); if (_e) _o->origin = _e->str(); }
  { auto _e = priority(); _o->priority = _e; }
}

inline ::flatbuffers::Offset<Register> Register::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RegisterT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRegister(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Register> CreateRegister(::flatbuffers::FlatBufferBuilder &_fbb, const RegisterT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RegisterT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _origin = _fbb.CreateString(_o->origin);
  auto _priority = _o->priority;
  return ambilightappnet::CreateRegister(
      _fbb,
      _origin,
      _priority);
}

inline RawImageT *RawImage::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RawImageT>(new RawImageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RawImage::UnPackTo(RawImageT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->data.begin()); } }
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
}

inline ::flatbuffers::Offset<RawImage> RawImage::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RawImageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRawImage(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RawImage> CreateRawImage(::flatbuffers::FlatBufferBuilder &_fbb, const RawImageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RawImageT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  auto _width = _o->width;
  auto _height = _o->height;
  return ambilightappnet::CreateRawImage(
      _fbb,
      _data,
      _width,
      _height);
}

inline ImageT *Image::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ImageT>(new ImageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Image::UnPackTo(ImageT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data_type(); _o->data.type = _e; }
  { auto _e = data(); if (_e) _o->data.value = ambilightappnet::ImageTypeUnion::UnPack(_e, data_type(), _resolver); }
  { auto _e = duration(); _o->duration = _e; }
}

inline ::flatbuffers::Offset<Image> Image::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateImage(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Image> CreateImage(::flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ImageT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data_type = _o->data.type;
  auto _data = _o->data.Pack(_fbb);
  auto _duration = _o->duration;
  return ambilightappnet::CreateImage(
      _fbb,
      _data_type,
      _data,
      _duration);
}

inline ClearT *Clear::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ClearT>(new ClearT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Clear::UnPackTo(ClearT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = priority(); _o->priority = _e; }
}

inline ::flatbuffers::Offset<Clear> Clear::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ClearT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateClear(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Clear> CreateClear(::flatbuffers::FlatBufferBuilder &_fbb, const ClearT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ClearT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _priority = _o->priority;
  return ambilightappnet::CreateClear(
      _fbb,
      _priority);
}

inline ColorT *Color::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ColorT>(new ColorT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Color::UnPackTo(ColorT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); _o->data = _e; }
  { auto _e = duration(); _o->duration = _e; }
}

inline ::flatbuffers::Offset<Color> Color::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ColorT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateColor(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Color> CreateColor(::flatbuffers::FlatBufferBuilder &_fbb, const ColorT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ColorT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data;
  auto _duration = _o->duration;
  return ambilightappnet::CreateColor(
      _fbb,
      _data,
      _duration);
}

inline RequestT *Request::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RequestT>(new RequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Request::UnPackTo(RequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = command_type(); _o->command.type = _e; }
  { auto _e = command(); if (_e) _o->command.value = ambilightappnet::CommandUnion::UnPack(_e, command_type(), _resolver); }
}

inline ::flatbuffers::Offset<Request> Request::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Request> CreateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _command_type = _o->command.type;
  auto _command = _o->command.Pack(_fbb);
  return ambilightappnet::CreateRequest(
      _fbb,
      _command_type,
      _command);
}

inline bool VerifyImageType(::flatbuffers::Verifier &verifier, const void *obj, ImageType type) {
  switch (type) {
    case ImageType_NONE: {
      return true;
    }
    case ImageType_RawImage: {
      auto ptr = reinterpret_cast<const ambilightappnet::RawImage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyImageTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyImageType(
        verifier,  values->Get(i), types->GetEnum<ImageType>(i))) {
      return false;
    }
  }
  return true;
}

inline void *ImageTypeUnion::UnPack(const void *obj, ImageType type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case ImageType_RawImage: {
      auto ptr = reinterpret_cast<const ambilightappnet::RawImage *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> ImageTypeUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case ImageType_RawImage: {
      auto ptr = reinterpret_cast<const ambilightappnet::RawImageT *>(value);
      return CreateRawImage(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline ImageTypeUnion::ImageTypeUnion(const ImageTypeUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case ImageType_RawImage: {
      value = new ambilightappnet::RawImageT(*reinterpret_cast<ambilightappnet::RawImageT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void ImageTypeUnion::Reset() {
  switch (type) {
    case ImageType_RawImage: {
      auto ptr = reinterpret_cast<ambilightappnet::RawImageT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = ImageType_NONE;
}

inline bool VerifyCommand(::flatbuffers::Verifier &verifier, const void *obj, Command type) {
  switch (type) {
    case Command_NONE: {
      return true;
    }
    case Command_Color: {
      auto ptr = reinterpret_cast<const ambilightappnet::Color *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Image: {
      auto ptr = reinterpret_cast<const ambilightappnet::Image *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Clear: {
      auto ptr = reinterpret_cast<const ambilightappnet::Clear *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Register: {
      auto ptr = reinterpret_cast<const ambilightappnet::Register *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCommandVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCommand(
        verifier,  values->Get(i), types->GetEnum<Command>(i))) {
      return false;
    }
  }
  return true;
}

inline void *CommandUnion::UnPack(const void *obj, Command type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case Command_Color: {
      auto ptr = reinterpret_cast<const ambilightappnet::Color *>(obj);
      return ptr->UnPack(resolver);
    }
    case Command_Image: {
      auto ptr = reinterpret_cast<const ambilightappnet::Image *>(obj);
      return ptr->UnPack(resolver);
    }
    case Command_Clear: {
      auto ptr = reinterpret_cast<const ambilightappnet::Clear *>(obj);
      return ptr->UnPack(resolver);
    }
    case Command_Register: {
      auto ptr = reinterpret_cast<const ambilightappnet::Register *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> CommandUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case Command_Color: {
      auto ptr = reinterpret_cast<const ambilightappnet::ColorT *>(value);
      return CreateColor(_fbb, ptr, _rehasher).Union();
    }
    case Command_Image: {
      auto ptr = reinterpret_cast<const ambilightappnet::ImageT *>(value);
      return CreateImage(_fbb, ptr, _rehasher).Union();
    }
    case Command_Clear: {
      auto ptr = reinterpret_cast<const ambilightappnet::ClearT *>(value);
      return CreateClear(_fbb, ptr, _rehasher).Union();
    }
    case Command_Register: {
      auto ptr = reinterpret_cast<const ambilightappnet::RegisterT *>(value);
      return CreateRegister(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline CommandUnion::CommandUnion(const CommandUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case Command_Color: {
      value = new ambilightappnet::ColorT(*reinterpret_cast<ambilightappnet::ColorT *>(u.value));
      break;
    }
    case Command_Image: {
      value = new ambilightappnet::ImageT(*reinterpret_cast<ambilightappnet::ImageT *>(u.value));
      break;
    }
    case Command_Clear: {
      value = new ambilightappnet::ClearT(*reinterpret_cast<ambilightappnet::ClearT *>(u.value));
      break;
    }
    case Command_Register: {
      value = new ambilightappnet::RegisterT(*reinterpret_cast<ambilightappnet::RegisterT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void CommandUnion::Reset() {
  switch (type) {
    case Command_Color: {
      auto ptr = reinterpret_cast<ambilightappnet::ColorT *>(value);
      delete ptr;
      break;
    }
    case Command_Image: {
      auto ptr = reinterpret_cast<ambilightappnet::ImageT *>(value);
      delete ptr;
      break;
    }
    case Command_Clear: {
      auto ptr = reinterpret_cast<ambilightappnet::ClearT *>(value);
      delete ptr;
      break;
    }
    case Command_Register: {
      auto ptr = reinterpret_cast<ambilightappnet::RegisterT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = Command_NONE;
}

inline const ambilightappnet::Request *GetRequest(const void *buf) {
  return ::flatbuffers::GetRoot<ambilightappnet::Request>(buf);
}

inline const ambilightappnet::Request *GetSizePrefixedRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ambilightappnet::Request>(buf);
}

inline Request *GetMutableRequest(void *buf) {
  return ::flatbuffers::GetMutableRoot<Request>(buf);
}

inline ambilightappnet::Request *GetMutableSizePrefixedRequest(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<ambilightappnet::Request>(buf);
}

inline bool VerifyRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ambilightappnet::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ambilightappnet::Request>(nullptr);
}

inline void FinishRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ambilightappnet::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ambilightappnet::Request> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ambilightappnet::RequestT> UnPackRequest(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ambilightappnet::RequestT>(GetRequest(buf)->UnPack(res));
}

inline std::unique_ptr<ambilightappnet::RequestT> UnPackSizePrefixedRequest(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ambilightappnet::RequestT>(GetSizePrefixedRequest(buf)->UnPack(res));
}

}  // namespace ambilightappnet

#endif  // FLATBUFFERS_GENERATED_AMBILIGHTAPPREQUEST_AMBILIGHTAPPNET_H_
